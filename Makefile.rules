SHELL := /bin/bash

################################################################################
#				ElibTargets
################################################################################
ElibTargets := all everything e elib elib_static clean configure redep distclean \
	       install check check-ctest check-lit verbose-check test

.PHONY: $(ElibTargets)

################################################################################
all: 
ifeq ($(wildcard build/Makefile),)
	$(error make configure must be run)
else
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
endif

################################################################################
everything:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) $(MAKE) $(NOPRINTD) configure
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
	$(CMD_VERB) $(MAKE) $(NOPRINTD) check

################################################################################
e:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) everything

################################################################################
elib:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib

elib_static:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib_static

################################################################################	
clean:
	$(CMD_VERB) if [ -f build/Makefile ]; \
		then $(MAKE) $(NOPRINTD) -C build clean ; \
	fi
	$(CMD_VERB) if [ -d src/filesystem/unit_tests/dynamic_test_env/ ]; \
		then chmod -R ug+rwx src/filesystem/unit_tests/dynamic_test_env/ ;\
		rm -rf src/filesystem/unit_tests/dynamic_test_env/ ;\
	fi
	

################################################################################
configure:
	$(CMD_VERB) rm -rf ./build/ ; mkdir -p build/
	$(CMD_VERB) cd build/ ; cmake  $(ELIB_CMAKE_OPTIONS) $(ELIB_INTERNAL_CMAKE_OPTIONS) .. ; cd ..


################################################################################
redep: 
	$(CMD_VERB) cd build/ ; cmake .. ; cd ..
	

################################################################################
distclean: 
	$(CMD_VERB) $(MAKE) $(NOPRINTD) clean
	$(CMD_VERB) rm -rf ./build ./bin ./test_coverage ./cov-int ./cov-int.tar.gz


################################################################################	
install:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build install


################################################################################
check-ctest:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build test

check-lit:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib elib_static
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build check-lit

check:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running tests ===
	$(CMD_VERB) python packages/lit/lit.py $(LIT_FLAGS) ./build/src

verbose-check:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib elib_static
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running tests ===
	$(CMD_VERB) python packages/lit/lit.py -v ./build/src

test:
	$(CMD_VERB) echo === Running CTest tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build test

################################################################################
#				ElibToolTargets
################################################################################

ElibToolTargets := valgrind-check \
		   scan scan-test scan-build coverage \
		   batch-build-command batch-build batch-check \

.PHONY: $(ElibToolTargets)

valgrind-check:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib elib_static
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running tests ===
	$(CMD_VERB) python packages/lit/lit.py -v --max-time=180 --vg --vg-leak --vg-arg=--trace-children-skip=*python* ./build/src

################################################################################
scan:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) rm -rf cov-int
	$(CMD_VERB) rm -rf build/ ;  mkdir -p build/ ; cd build/ ; cmake -DCONFIG_COVERITY_SCAN=ON -DCONFIG_ALL_WARNINGS=OFF .. ; cd ..
	$(CMD_VERB) cov-build --dir cov-int $(MAKE) $(NOPRINTD) -C build all
	$(CMD_VERB) tar -zcvf cov-int.tar.gz cov-int/


################################################################################
scan-test:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) rm -rf build/ ;  mkdir -p build/ ; cd build/ ; cmake -DCONFIG_COVERITY_SCAN=ON .. ; cd ..
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build all


################################################################################
scan-build:
	$(CMD_VERB) rm -rf build/ ; mkdir -p build ; cd build/ ; cmake $(ELIB_CMAKE_OPTIONS) .. ; scan-build make $(NOPRINTD) all; cd ..


################################################################################
coverage:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) rm -rf build/ ; mkdir -p build/ ; cd build/ ; \
		cmake -DCMAKE_BUILD_TYPE=TEST $(ELIB_CMAKE_OPTIONS) ..  ; \
		cd ..
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -j$(THREADS) -C build all
	$(CMD_VERB) rm -rf test_coverage ; mkdir -p test_coverage
	cd build/src ; \
	lcov --zerocounters --directory . ; \
	lcov --capture --initial --directory . --output-file test_coverage ; \
	$(MAKE) -C .. test;\
	lcov --no-checksum --directory . --capture --output-file test_coverage.info ;\
	lcov --remove test_coverage.info '/usr/include/*' '/opt/*' 'src/*/unit_tests/*' --output-file test_coverage.info ;\
	genhtml --demangle-cpp test_coverage.info -o ../../test_coverage
	$(CMD_VERB) find test_coverage/ -type d -exec chmod 750 {} \; 
	$(CMD_VERB) find test_coverage/ -type f -exec chmod 640 {} \;

	

################################################################################
batch-build-command:
ifdef BATCH_VERBOSE
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -j$(THREADS) -C build  all
else
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -j$(THREADS) -C build all 1> /dev/null
endif


################################################################################
batch-build:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) $(MAKE) $(NOPRINTD) configure
	$(CMD_VERB) time $(MAKE) $(NOPRINTD) batch-build-command
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C batch-check


batch-check: 
	$(CMD_VERB) python packages/lit/lit.py -sv --show-unsupported --no-progress-bar ./build/src
