SHELL := /bin/bash

################################################################################
#				ElibTargets
################################################################################
ElibTargets := all everything e elib elib_static clean configure redep distclean install \
	       check check_all check_static check_shared

.PHONY: $(ElibTargets)

################################################################################
all: 
ifeq ($(wildcard build/Makefile),)
	$(error make configure must be run)
else
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
endif

################################################################################
everything:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) $(MAKE) $(NOPRINTD) configure
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
	$(CMD_VERB) $(MAKE) $(NOPRINTD) check

################################################################################
e:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) everything

################################################################################
elib:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib

elib_static:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build elib_static

################################################################################	
clean:
	$(CMD_VERB) if [ -f build/Makefile ]; \
		then $(MAKE) $(NOPRINTD) -C build clean ; \
	fi
	

################################################################################
configure:
	$(CMD_VERB) rm -rf ./build/ ; mkdir -p build/
	$(CMD_VERB) cd build/ ; cmake  $(ELIB_CMAKE_OPTIONS) $(ELIB_INTERNAL_CMAKE_OPTIONS) .. ; cd ..


################################################################################
redep: 
	$(CMD_VERB) cd build/ ; cmake .. ; cd ..
	

################################################################################
distclean: 
	$(CMD_VERB) $(MAKE) $(NOPRINTD) clean
	$(CMD_VERB) rm -rf ./build ./bin 


################################################################################	
install:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build install


################################################################################	
check_all:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build 
	$(CMD_VERB) echo
	$(CMD_VERB) echo === Running static tests ===
	$(CMD_VERB) ./bin/elib_test_static --log_level=message --report_level=short
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running shared tests ===
	$(CMD_VERB) ./bin/elib_test_shared --log_level=message --report_level=short


################################################################################
check:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) check_shared

################################################################################
check_shared:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running shared tests ===
	$(CMD_VERB) ./bin/elib_test_shared --log_level=message --report_level=short


################################################################################
check_static:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
	$(CMD_VERB) echo
	$(CMD_VERB) echo === Running static tests ===
	$(CMD_VERB) ./bin/elib_test_static --log_level=message --report_level=short


################################################################################
#				ElibToolTargets
################################################################################

ElibToolTargets := scan scan_test scan_build valgrind_check coverage \
		   batch_build_command batch_build batch_build_shared batch_build_static

.PHONY: $(ElibTargets)

################################################################################
scan:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) rm -rf cov-int
	$(CMD_VERB) rm -rf build/ ;  mkdir -p build/ ; cd build/ ; cmake -DCONFIG_COVERITY_SCAN=ON -DCONFIG_ALL_WARNINGS=OFF .. ; cd ..
	$(CMD_VERB) cov-build --dir cov-int $(MAKE) $(NOPRINTD) -C build all
	$(CMD_VERB) tar -zcvf cov-int.tar.gz cov-int/


################################################################################
scan_test:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) rm -rf build/ ;  mkdir -p build/ ; cd build/ ; cmake -DCONFIG_COVERITY_SCAN=ON .. ; cd ..
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build all


################################################################################
scan_build:
	$(CMD_VERB) rm -rf build/ ; mkdir -p build ; cd build/ ; cmake $(ELIB_CMAKE_OPTIONS) .. ; scan-build make $(NOPRINTD) all; cd ..


################################################################################
valgrind_check:
	$(CMD_VERB) echo === Building tests ===
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -C build
	$(CMD_VERB) echo 
	$(CMD_VERB) echo === Running shared tests ===
	$(CMD_VERB) valgrind -v --show-reachable=yes --leak-check=full ./bin/elib_test_shared --log_level=message --report_level=short


################################################################################
coverage:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) rm -rf build/ ; mkdir -p build/ ; cd build/ ; \
		cmake -DCMAKE_BUILD_TYPE=TEST $(ELIB_CMAKE_OPTIONS) ..  ; \
		cd ..
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -j$(THREADS) -C build all
	$(CMD_VERB) rm -rf test_coverage ; mkdir -p test_coverage
	$(CMD_VERB) cp bin/elib_test_shared build/src/
	cd build/src ; \
	lcov --zerocounters --directory . ; \
	lcov --capture --initial --directory . --output-file test_coverage ; \
	./elib_test_shared --log_level=message --report_level=short ;\
	lcov --no-checksum --directory . --capture --output-file test_coverage.info ;\
	lcov --remove test_coverage.info '/usr/include/*' '/opt/*' 'src/*/unit_tests/*' --output-file test_coverage.info ;\
	genhtml --demangle-cpp test_coverage.info -o ../../test_coverage
	$(CMD_VERB) find test_coverage/ -type d -exec chmod 750 {} \; 
	$(CMD_VERB) find test_coverage/ -type f -exec chmod 640 {} \;

	

################################################################################
batch_build_command:
ifdef BATCH_VERBOSE
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -j$(THREADS) -C build  all
else
	$(CMD_VERB) $(MAKE) $(NOPRINTD) -j$(THREADS) -C build all 1> /dev/null
endif


################################################################################
batch_build:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) $(MAKE) $(NOPRINTD) configure
	$(CMD_VERB) time $(MAKE) $(NOPRINTD) batch_build_command
	$(CMD_VERB) $(MAKE) $(NOPRINTD) check

batch_build_shared:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) $(MAKE) $(NOPRINTD) configure 
	$(CMD_VERB) time $(MAKE) $(NOPRINTD) batch_build_command
	$(CMD_VERB) $(MAKE) $(NOPRINTD) check_shared

batch_build_static:
	$(CMD_VERB) $(MAKE) $(NOPRINTD) distclean
	$(CMD_VERB) $(MAKE) $(NOPRINTD) configure 
	$(CMD_VERB) time $(MAKE) $(NOPRINTD) batch_build_command
	$(CMD_VERB) $(MAKE) $(NOPRINTD) check_static
