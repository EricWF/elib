macro(pythonize_bool var)
  if (${var})
    set(${var} True)
  else()
    set(${var} False)
  endif()
endmacro()

find_package(Threads REQUIRED)
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost COMPONENTS unit_test_framework REQUIRED)
set(Boost_FIND_QUIETLY ON CACHE BOOL "Find Boost Quietly" FORCE)
include_directories(${Boost_INCLUDE_DIRS})

add_executable(TESTOBJ pass_test.pass.cpp)
target_link_libraries( TESTOBJ elib ${CMAKE_THREAD_LIBS_INIT} ${Boost_LIBRARIES})



include(FindPythonInterp)
if(PYTHONINTERP_FOUND)


  string(TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" name)
  set(flags "${${name}} ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_COMPILER_ARG1}")
  separate_arguments(flags)

  get_directory_property(value DIRECTORY ${ELIB_ROOT_PATH} COMPILE_DEFINITIONS)
  if (value)
    foreach(item ${value})
      list(FIND flags "-D${item}" FOUND)
      if (FOUND EQUAL -1)
        list(APPEND flags "-D${item}")
      endif()
    endforeach()
  endif()

  get_directory_property(value DIRECTORY ${ELIB_ROOT_PATH}/src COMPILE_DEFINITIONS)
  if (value)
    foreach(item ${value})
      list(FIND flags "-D${item}" FOUND)
      if (FOUND EQUAL -1)
        list(APPEND flags "-D${item}")
      endif()
    endforeach()
  endif()

  get_directory_property(value COMPILE_DEFINITIONS)
  if (value)
    foreach(item ${value})
      list(FIND flags "-D${item}" FOUND)
      if (FOUND EQUAL -1)
        list(APPEND flags "-D${item}")
      endif()
    endforeach()
  endif()

  get_directory_property(value DIRECTORY ${ELIB_ROOT_PATH} INCLUDE_DIRECTORIES)
  if (value)
    foreach(item ${value})
      list(FIND flags "-I${item}" FOUND)
      if (FOUND EQUAL -1)
        list(APPEND flags "-I${item}")
      endif()
    endforeach()
  endif()

  get_directory_property(value DIRECTORY ${ELIB_ROOT_PATH}/src INCLUDE_DIRECTORIES)
  if (value)
    foreach(item ${value})
      list(FIND flags "-I${item}" FOUND)
      if (FOUND EQUAL -1)
        list(APPEND flags "-I${item}")
      endif()
    endforeach()
  endif()


  get_directory_property(value INCLUDE_DIRECTORIES)
  if (value)
    foreach(item ${value})
      list(FIND flags "-I${item}" FOUND)
      if (FOUND EQUAL -1)
        list(APPEND flags "-I${item}")
      endif()
    endforeach()
  endif()

  set(ELIB_TEST_COMPILE_FLAGS ${flags})

################################################################################


set(ELIB_TEST_LINK_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_THREAD_LIBS_INIT} ${Boost_LIBRARIES}")
separate_arguments(ELIB_TEST_LINK_FLAGS)

################################################################################
  
  set(ELIB_TEST_BINARY_DIR ${CMAKE_BINARY_DIR})
  pythonize_bool(CONFIG_CXX1Y)

  set(LIT_EXECUTABLE "${ELIB_ROOT_PATH}/packages/lit/lit.py" CACHE FILEPATH "Path to LLVM's lit.py.")
  set(LIT_ARGS_DEFAULT "-sv")
  set(LIT_ARGS "${LIT_ARGS_DEFAULT}" CACHE STRING "Default lit args")
  separate_arguments(LIT_ARGS)

  set(SAMPLE_TARGET "TESTOBJ")

  set(AUTO_GEN_COMMENT "## Autogenerated by elib configuration.\n# Do not edit!")
  

  configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in
    ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
    @ONLY)

  add_custom_target(check-elib
    COMMAND ${PYTHON_EXECUTABLE}
            ${LIT_EXECUTABLE}
            ${LIT_ARGS}
            ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS elib
    COMMENT "Running elib tests")
else()
  message(WARNING "Could not find Python, no check target will be available!")
endif()
