# -*- Python -*- vim: set syntax=python tabstop=4 expandtab cc=80:

# Configuration file for the 'lit' test runner.

import errno
import os
import platform
import re
import shlex
import signal
import subprocess
import sys
import tempfile
import time

import lit.Test
import lit.formats
import lit.util

class LibcxxTestFormat(lit.formats.FileBasedTest):
    """
    Custom test format handler for use with the test format use by libc++.

    Tests fall into two categories:
      FOO.pass.cpp - Executable test which should compile, run, and exit with
                     code 0.
      FOO.fail.cpp - Negative test case which is expected to fail compilation.
    """

    def __init__(self, cxx_compiler, cpp_flags, ld_flags, exec_env):
        self.cxx_compiler = cxx_compiler
        self.cpp_flags = list(cpp_flags)
        self.ld_flags = list(ld_flags)
        self.exec_env = dict(exec_env)

    def execute_command(self, command, in_dir=None):
        kwargs = {
            'stdin' :subprocess.PIPE,
            'stdout':subprocess.PIPE,
            'stderr':subprocess.PIPE,
        }
        if in_dir:
            kwargs['cwd'] = in_dir
    
        p = subprocess.Popen(command, **kwargs)
        out,err = p.communicate()
        exitCode = p.wait()

        # Detect Ctrl-C in subprocess.
        if exitCode == -signal.SIGINT:
            raise KeyboardInterrupt

        return out, err, exitCode

    def execute(self, test, lit_config):
        while True:
            try:
                return self._execute(test, lit_config)
            except OSError as oe:
                if oe.errno != errno.ETXTBSY:
                    raise
                time.sleep(0.1)

    def _execute(self, test, lit_config):
        # Extract test metadata from the test file.
        requires = []
        excludes = []
        header_excludes = []
        with open(test.getSourcePath()) as f:
            for ln in f:
                if 'XFAIL:' in ln:
                    items = ln[ln.index('XFAIL:') + 6:].split(',')
                    test.xfails.extend([s.strip() for s in items])
                elif 'REQUIRES:' in ln:
                    items = ln[ln.index('REQUIRES:') + 9:].split(',')
                    requires.extend([s.strip() for s in items])
                elif 'EXCLUDES:' in ln:
                    items = ln[ln.index('EXCLUDES:') + 9:].split(',')
                    excludes.extend([s.strip() for s in items])
                elif ln.startswith('#') and 'define' in ln  and '_HPP' in ln:
                    for ex in config.elib_exclude_libraries:
                        if ex.strip() and str(' ' + ex) in ln:
                            header_excludes.extend([ex])
                elif ln.startswith('#'):
                    pass
                elif not ln.startswith("//") and ln.strip():
                    # Stop at the first non-empty line that is not a C++
                    # comment.
                    break

        # Check that we have the required features.
        #
        # FIXME: For now, this is cribbed from lit.TestRunner, to avoid
        # introducing a dependency there. What we more ideally would like to do
        # is lift the "requires" handling to be a core lit framework feature.
        missing_required_features = [f for f in requires
                                     if f not in test.config.available_features]
        if missing_required_features:
            #print("Missing Features: " + str(missing_required_features))
            return (lit.Test.UNSUPPORTED,
                    "Test requires the following features: %s" % (
                      ', '.join(missing_required_features),))
                    
        excluding_features = [f for f in excludes if f in test.config.available_features]
        if excluding_features:
            return (lit.Test.UNSUPPORTED,
                    "Test excludes the following features: %s" % (
                        ', '.join(excluding_features),))
                    
        if len(header_excludes) != 0:
            return(lit.Test.UNSUPPORTED,
                    "Test excluded due to header guard prefix: %s" % (
                        ', '.join(header_excludes),))

        # Evaluate the test.
        return self._evaluate_test(test, lit_config)

    def _evaluate_test(self, test, lit_config):
        name = test.path_in_suite[-1]
        source_path = test.getSourcePath()
        source_dir = os.path.dirname(source_path)

        # Check what kind of test this is.
        assert name.endswith('.hpp')

        cmd = [self.cxx_compiler, '-c',
                '-o', '/dev/null', source_path] + self.cpp_flags
        out, err, exitCode = self.execute_command(cmd)
        if exitCode != 0:
            report = """Command: %s\n""" % ' '.join(["'%s'" % a
                                                     for a in cmd])
            report += """Exit Code: %d\n""" % exitCode
            if out:
                report += """Standard Output:\n--\n%s--""" % out
            if err:
                report += """Standard Error:\n--\n%s--""" % err
            report += "\n\nExpected compilation to pass!"
            return lit.Test.FAIL, report
        if err:
            report = """Command: %s\n""" % ' '.join(["'%s'" % a
                                                     for a in cmd])
            report += """Exit Code: %d\n""" % exitCode
            if out:
                report += """Standard Output:\n--\n%s--""" % out
            if err:
                report += """Standard Error:\n--\n%s--""" % err
            report += "\n\nUnexpected Warning!"
            return lit.Test.WARN, report
        return lit.Test.PASS, ""
        

# name: The name of this test suite.
config.name = 'elib_header_tests'

# suffixes: A list of file extensions to treat as test files.
# NOTE: The two part extension requires modifications to the LIT source.
config.suffixes = ['.hpp']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

config.excludes = set(['experimental'])

cxx_compiler = getattr(config, 'cxx_compiler', None)
assert cxx_compiler != None

elib_src_root = getattr(config, 'elib_src_root', None)
assert elib_src_root != None

elib_obj_root = getattr(config, 'elib_obj_root', None)
assert elib_obj_root != None

sample_object = getattr(config, 'sample_object', None)
assert sample_object != None

available_features = getattr(config, 'available_features', None)
assert available_features != None

elib_include_directories = getattr(config, 'elib_include_directories', None)
assert elib_include_directories != None


elib_exclude_directories = getattr(config, 'elib_exclude_directories', None)
assert elib_exclude_directories != None
elib_exclude_directories[:] = (os.path.join(elib_src_root, 'header_tests', 'elib', value) for value in elib_exclude_directories)
setattr(config, 'excludes',set(elib_exclude_directories))
setattr(config, 'elib_exclude_directories', elib_exclude_directories)


elib_exclude_libraries = getattr(config, 'elib_exclude_libraries', None)
assert elib_exclude_libraries != None
# erase the SOURCE suffix
# ELIB_FILESYSTEM_SOURCE -> ELIB_FILESYSTEM_
elib_exclude_libraries[:] = (value[:-6] for value in elib_exclude_libraries)
setattr(config, 'elib_exclude_libraries', elib_exclude_libraries)
print(elib_exclude_libraries)

sample_dir = os.path.join(elib_obj_root, 'CMakeFiles', sample_object + '.dir')
flags_file = os.path.join(sample_dir, 'flags.make')
link_file = os.path.join(sample_dir, 'link.txt')

with open(flags_file, 'r') as f:
    flags_makefile = f.read()

tk_list = shlex.split(flags_makefile, True)
remove = ['=', 'CXX_FLAGS', 'CXX_DEFINES']
cxx_compile_flags = (value for value in tk_list if value not in remove)
cxx_compile_flags = list(cxx_compile_flags)
with open(link_file, 'r') as f:
    link_file = f.read();
    
tk_list = shlex.split(link_file, True)
cxx_link_flags = tk_list[tk_list.index('-o') + 2:]

# Configure extra linker parameters.
exec_env = {}


config.test_format = LibcxxTestFormat(
    cxx_compiler,
    cpp_flags = cxx_compile_flags + ['-fsyntax-only'],
    ld_flags =  cxx_link_flags,
    exec_env = exec_env)


